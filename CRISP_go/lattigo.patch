diff --git a/ckks/ciphertext.go b/ckks/ciphertext.go
index c038487..cd41eee 100644
--- a/ckks/ciphertext.go
+++ b/ckks/ciphertext.go
@@ -26,6 +26,19 @@ func NewCiphertext(params *Parameters, degree uint64, level uint64, scale float6
 	return ciphertext
 }
 
+// NewCiphertextFromPolys creates a new Ciphertext with polys poly and scale scale
+func NewCiphertextFromPolys(scale float64, ct0, ct1 *ring.Poly) (ciphertext *Ciphertext) {
+
+	ciphertext = &Ciphertext{&Element{}}
+
+	ciphertext.value = []*ring.Poly{ct0, ct1}
+
+	ciphertext.scale = scale
+	ciphertext.isNTT = true
+
+	return ciphertext
+}
+
 // NewCiphertextRandom generates a new uniformly distributed Ciphertext of degree, level and scale.
 func NewCiphertextRandom(prng utils.PRNG, params *Parameters, degree, level uint64, scale float64) (ciphertext *Ciphertext) {
 
diff --git a/ckks/encryptor.go b/ckks/encryptor.go
index 3332905..7e26b1d 100644
--- a/ckks/encryptor.go
+++ b/ckks/encryptor.go
@@ -16,6 +16,11 @@ type Encryptor interface {
 	// The level of the output ciphertext is plaintext.Level().
 	EncryptNew(plaintext *Plaintext) *Ciphertext
 
+	// EncryptNewWithNoises encrypts the input plaintext using the stored key and returns
+	// the result on a newly created ciphertext. The encryption is done by first
+	// encrypting zero in QP, dividing by P and then adding the plaintext.
+	EncryptNewWithNoises(plaintext *Plaintext, r0, e0, e1 *ring.Poly) *Ciphertext
+
 	// Encrypt encrypts the input plaintext using the stored key, and returns
 	// the result on the receiver ciphertext. The encryption is done by first
 	// encrypting zero in QP, dividing by P and then adding the plaintext.
@@ -154,6 +159,98 @@ func (encryptor *pkEncryptor) EncryptNew(plaintext *Plaintext) *Ciphertext {
 	return ciphertext
 }
 
+// Encrypt encrypts the input Plaintext using the stored key, and returns the result
+//
+// encrypt with pk: ciphertext = [pk[0]*u + m + e_0, pk[1]*u + e_1]
+// encrypt with sk: ciphertext = [-a*sk + m + e, a]
+func (encryptor *pkEncryptor) EncryptNewWithNoises(plaintext *Plaintext, r0, e0, e1 *ring.Poly) (ciphertext *Ciphertext) {
+
+	ciphertext = NewCiphertext(encryptor.params, 1, plaintext.Level(), plaintext.Scale())
+
+	lvl := utils.MinUint64(plaintext.Level(), ciphertext.Level())
+
+	poolQ0 := encryptor.poolQ[0]
+	poolQ1 := encryptor.poolQ[1]
+	poolQ2 := encryptor.poolQ[2]
+	poolP0 := encryptor.poolP[0]
+	poolP1 := encryptor.poolP[1]
+	poolP2 := encryptor.poolP[2]
+
+	// We sample a R-WLE instance (encryption of zero) over the extended ring (ciphertext ring + special prime)
+
+	ringQ := encryptor.ringQ
+	ringP := encryptor.ringP
+
+	// use provided noise instead of sampling it
+	poolP2 = r0
+	extendBasisSmallNormAndCenter(ringQ, ringP, poolQ2, poolP2)
+
+	// (#Q + #P) NTT
+	ringQ.NTTLvl(lvl, poolQ2, poolQ2)
+	ringP.NTT(poolP2, poolP2)
+
+	ringQ.MFormLvl(lvl, poolQ2, poolQ2)
+	ringP.MForm(poolP2, poolP2)
+
+	pk0P := new(ring.Poly)
+	pk1P := new(ring.Poly)
+	pk0P.Coeffs = encryptor.pk.pk[0].Coeffs[len(ringQ.Modulus):]
+	pk1P.Coeffs = encryptor.pk.pk[1].Coeffs[len(ringQ.Modulus):]
+
+	// ct0 = u*pk0
+	// ct1 = u*pk1
+	ringQ.MulCoeffsMontgomeryLvl(lvl, poolQ2, encryptor.pk.pk[0], poolQ0)
+	ringQ.MulCoeffsMontgomeryLvl(lvl, poolQ2, encryptor.pk.pk[1], poolQ1)
+	ringP.MulCoeffsMontgomery(poolP2, pk0P, poolP0)
+	ringP.MulCoeffsMontgomery(poolP2, pk1P, poolP1)
+
+	// 2*(#Q + #P) NTT
+	ringQ.InvNTTLvl(lvl, poolQ0, poolQ0)
+	ringQ.InvNTTLvl(lvl, poolQ1, poolQ1)
+	ringP.InvNTT(poolP0, poolP0)
+	ringP.InvNTT(poolP1, poolP1)
+
+	// ct0 = u*pk0 + e0
+	// use provided noise instead of sampling it
+	poolQ2 = e0
+	extendBasisSmallNormAndCenter(ringQ, ringP, poolQ2, poolP2)
+	ringQ.AddLvl(lvl, poolQ0, poolQ2, poolQ0)
+	ringP.Add(poolP0, poolP2, poolP0)
+
+	// ct1 = u*pk1 + e1
+	// use provided noise instead of sampling it
+	poolQ2 = e1
+	extendBasisSmallNormAndCenter(ringQ, ringP, poolQ2, poolP2)
+	ringQ.AddLvl(lvl, poolQ1, poolQ2, poolQ1)
+	ringP.Add(poolP1, poolP2, poolP1)
+
+	// ct0 = (u*pk0 + e0)/P
+	encryptor.baseconverter.ModDownSplitPQ(lvl, poolQ0, poolP0, ciphertext.value[0])
+
+	// ct1 = (u*pk1 + e1)/P
+	encryptor.baseconverter.ModDownSplitPQ(lvl, poolQ1, poolP1, ciphertext.value[1])
+
+	if !plaintext.isNTT {
+		ringQ.AddLvl(lvl, ciphertext.value[0], plaintext.value, ciphertext.value[0])
+	}
+
+	// 2*#Q NTT
+	ringQ.NTTLvl(lvl, ciphertext.value[0], ciphertext.value[0])
+	ringQ.NTTLvl(lvl, ciphertext.value[1], ciphertext.value[1])
+
+	if plaintext.isNTT {
+		// ct0 = (u*pk0 + e0)/P + m
+		ringQ.AddLvl(lvl, ciphertext.value[0], plaintext.value, ciphertext.value[0])
+	}
+
+	ciphertext.value[0].Coeffs = ciphertext.value[0].Coeffs[:lvl+1]
+	ciphertext.value[1].Coeffs = ciphertext.value[1].Coeffs[:lvl+1]
+
+	ciphertext.isNTT = true
+
+	return
+}
+
 func (encryptor *pkEncryptor) Encrypt(plaintext *Plaintext, ciphertext *Ciphertext) {
 
 	if encryptor.baseconverter == nil {
@@ -317,6 +414,10 @@ func (encryptor *skEncryptor) EncryptNew(plaintext *Plaintext) *Ciphertext {
 	return ciphertext
 }
 
+func (encryptor *skEncryptor) EncryptNewWithNoises(plaintext *Plaintext, r0, e0, e1 *ring.Poly) (ciphertext *Ciphertext) {
+	panic("This is not implemented")
+}
+
 func (encryptor *skEncryptor) Encrypt(plaintext *Plaintext, ciphertext *Ciphertext) {
 	encryptor.encryptSample(plaintext, ciphertext)
 }
diff --git a/ckks/plaintext.go b/ckks/plaintext.go
index 5cde390..ed35e1f 100644
--- a/ckks/plaintext.go
+++ b/ckks/plaintext.go
@@ -24,3 +24,18 @@ func NewPlaintext(params *Parameters, level uint64, scale float64) *Plaintext {
 
 	return plaintext
 }
+
+// NewPlaintextFromPoly creates a new Plaintext with poly poly and scale scale
+func NewPlaintextFromPoly(scale float64, isNTT bool, poly *ring.Poly) *Plaintext {
+
+	plaintext := &Plaintext{&Element{}, nil}
+
+	plaintext.Element.value = []*ring.Poly{poly}
+
+	plaintext.value = plaintext.Element.value[0]
+
+	plaintext.scale = scale
+	plaintext.isNTT = isNTT
+
+	return plaintext
+}
diff --git a/go.mod b/go.mod
index 3460f89..a71699e 100644
--- a/go.mod
+++ b/go.mod
@@ -3,6 +3,7 @@ module github.com/ldsec/lattigo/v2
 go 1.13
 
 require (
+	github.com/ldsec/lattigo v1.3.0
 	github.com/stretchr/testify v1.6.1
 	golang.org/x/crypto v0.0.0-20201002170205-7f63de1d35b0
 )
diff --git a/go.sum b/go.sum
index 32db8ec..c90e675 100644
--- a/go.sum
+++ b/go.sum
@@ -1,19 +1,26 @@
 github.com/davecgh/go-spew v1.1.0 h1:ZDRjVQ15GmhC3fiQ8ni8+OwkZQO4DARzQgrnXU1Liz8=
 github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
+github.com/ldsec/lattigo v1.3.0 h1:E+pwWoHFmCD0GIQCb3QI6M0MIqyziyx0lnB0eNFyzbY=
+github.com/ldsec/lattigo v1.3.0/go.mod h1:5Gexy0KDFEvbEZVLvEBCbMihs/nM1SQfgjq4Row4/Ak=
 github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
 github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
 github.com/stretchr/objx v0.1.0 h1:4G4v2dO3VZwixGIRoQ5Lfboy6nUhCyYzaqnIAPPhYs4=
 github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
+github.com/stretchr/testify v0.0.0-20190311161405-34c6fa2dc709/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=
 github.com/stretchr/testify v1.6.1 h1:hDPOHmpOpP40lSULcqw7IrRb/u7w6RpDC9399XyoNd0=
 github.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
+golang.org/x/crypto v0.0.0-20190701094942-4def268fd1a4/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20201002170205-7f63de1d35b0 h1:hb9wdF1z5waM+dSIICn1l0DkLVDT3hqhhQsDNUmHPRE=
 golang.org/x/crypto v0.0.0-20201002170205-7f63de1d35b0/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
+golang.org/x/lint v0.0.0-20190409202823-959b441ac422/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=
+golang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190412213103-97732733099d h1:+R4KGOnez64A81RvjARKc4UT5/tI9ujCIVX+P5KiHuI=
 golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
+golang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c h1:dUUwHk2QECo/6vqA44rthZ8ie2QXMNeKRTHCNY2nXvo=
